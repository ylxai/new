generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")

  // Menggunakan pooler dari Prisma yang direkomendasikan untuk lingkungan serverless seperti Vercel
  relationMode = "prisma"
}

model Event {
  id          String   @id @default(cuid())
  name        String
  eventCode   String   @unique // Kode unik untuk URL, cth: "pernikahan-budi-ana"
  date        DateTime
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  photos   Photo[]
  messages GuestbookMessage[]
}

model Photo {
  id        String   @id @default(cuid())
  s3Key     String   @unique // Kunci file di S3, cth: "events/pernikahan-budi-ana/image123.jpg"
  s3Url     String   // URL publik atau CDN dari foto
  altText   String?
  createdAt DateTime @default(now())

  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model GuestbookMessage {
  id        String   @id @default(cuid())
  author    String   @default("Tamu")
  message   String
  likes     Int      @default(0)
  createdAt DateTime @default(now())

  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model Package {
  id          String   @id @default(cuid())
  name        String
  price       Decimal  @db.Decimal(10, 2)
  description String?
  features    String[] // Menyimpan fitur sebagai array string
  isPopular   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AdminUser {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String?
  passwordHash String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String?
  passwordHash String
  password     String? // Diubah dari passwordHash dan dibuat opsional
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  accounts Account[]
  sessions Session[]
}

// Model-model yang dibutuhkan oleh NextAuth.js
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}